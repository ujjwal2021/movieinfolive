{"version":3,"sources":["GlobalStyle.js","images/react-movie-logo.svg","images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/Header.jsx","config.js","API.js","helpers.js","hooks/UseHomeFetch.jsx","components/HeroImage/HeroImage.styles.js","components/HeroImage/HeroImage.jsx","components/Grid/Grid.styles.js","components/Grid/Grid.jsx","components/Thumb/Thumb.styles.js","components/Thumb/Thumb.jsx","components/Spinner/Spinner.styles.js","components/Spinner/Spinner.jsx","images/search-icon.svg","components/SearchBar/SearchBar.styles.js","components/SearchBar/SearchBar.jsx","components/Button/Button.styles.js","components/Button/Button.jsx","images/no_image.jpg","components/Home.jsx","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/BreadCrumb.jsx","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/MovieInfo.jsx","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/MovieInfoBar.jsx","components/Actor/Actor.styles.js","components/Actor/Actor.jsx","components/Movie.jsx","hooks/useMovieFetch.jsx","components/NotFound.jsx","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","src","RMDBLogo","alt","TMDBLogo","ALT","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","defaultConfig","method","headers","API","fetchMovies","searchTerm","page","a","endpoint","console","log","fetch","json","fetchMovie","movieId","response","status","Error","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","isPersistedState","stateName","sessionState","sessionStorage","getItem","parse","initialState","results","total_pages","total_results","props","image","Text","HeroImage","title","text","Grid","header","children","Image","Thumb","clickable","Spinner","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","e","currentTarget","value","button","Button","callback","onClick","Home","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","movies","prev","setItem","useHomeFetch","backdrop_path","original_title","overview","map","movie","poster_path","NoImage","id","BreadCrumb","movieTitle","textDecoration","backdrop","MovieInfo","className","vote_average","directors","length","director","name","credit_id","MovieInfoBar","budget","revenue","Actor","character","imageUrl","Movie","useParams","errorMessage","setErrorMessage","credits","crew","filter","member","job","actors","cast","message","useMovieFetch","isNaN","runtime","actor","profile_path","NotFound","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e727242.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --maxWidth: 1280px; \n    --white: #fff;\n    --lightGrey: #eee;\n    --medGrey: #353535; \n    --darkGrey: #1c1c1c;\n    --fontSuperBig: 2.5rem;\n    --fontBig: 1.5rem;\n    --fontMed: 1.2rem;\n    --fontSmall: 1rem;\n  }\n\n  * {\n    box-sizing: border-box;\n    font-family: 'Abel', sans-serif;  \n  }\n\n  body {  \n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n\n    h1 {\n      font-size: 2rem;\n      font-weight: 600;\n      color: var(--white);\n    }\n\n    h3 {\n      font-size: 1.1rem;\n      font-weight: 600;\n    }\n\n    p {\n      font-size: 1rem;\n      color: var(--white);\n    }\n    a{\n      tect-decoration: none;\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/react-movie-logo.42955eb6.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.f15b6632.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  background: var(--darkGrey);\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  max-width: var(--maxWidth);\n  padding: 20px 0;\n  margin  0 auto;\n\n`;\n\nexport const LogoImg = styled.img`\n  width: 200px;\n  @media screen and max-width: 500px){\n    width: 150px;\n  }\n`;\n\nexport const TMDBLogoImg = styled.img`\n  width:100px;\n  @media screen and (max-width: 500px){\n    width: 80px;\n  }\n`;","import React from 'react';\r\n\r\nimport RMDBLogo from '../../images/react-movie-logo.svg';\r\nimport TMDBLogo from '../../images/tmdb_logo.svg';\r\nimport { Wrapper, Content, LogoImg, TMDBLogoImg } from './Header.styles';\r\nimport { Link } from 'react-router-dom';\r\nconst Header = () => {\r\n    return (\r\n        < Wrapper>\r\n            <Content>\r\n                <Link to='/'>\r\n                    <LogoImg src={RMDBLogo} alt='rmdb-logo'/>\r\n                </Link>\r\n                <TMDBLogoImg src={TMDBLogo} ALT='tmdb-logo'/>\r\n            </Content>\r\n            \r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","// Configuration for TMDB API\n// Read more about the API here: https://developers.themoviedb.org/\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n// For login and voting\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w780';\n\nexport {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n};\n","import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n} from './config';\n\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n};\n\nconst API = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n      console.log(endpoint)\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async (movieId) => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    // return await (await fetch(endpoint)).json();\n    const response  = await fetch(endpoint);\n    // console.log('From fetch movie ',response, response.status);\n    if(response.status === 200){\n      return await response.json();\n    }\n    else{\n      // return response.status;\n      throw new Error(`Movie with id ${movieId} not found .`);\n    }\n  },\n  fetchCredits: async (movieId) => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken,\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData),\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken }),\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n};\nexport default API;\n","// Convert time to hours and minutes\nexport const calcTime = time => {\n  const hours = Math.floor(time / 60);\n  const mins = time % 60;\n  return `${hours}h ${mins}m`;\n};\n// Convert a number to money formatting\nexport const convertMoney = money => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n  });\n  return formatter.format(money);\n};\n\nexport const isPersistedState = stateName =>{\n  const sessionState = sessionStorage.getItem(stateName);\n  return sessionState && JSON.parse(sessionState)\n}\n","import {useState, useEffect} from \"react\";\r\nimport API from '../API';\r\n// helpers session storage\r\nimport { isPersistedState } from \"../helpers\";\r\n\r\nconst initialState = {\r\n    page: 0,\r\n    results: [],\r\n    total_pages: 0,\r\n    total_results: 0,\r\n}\r\n\r\nexport const useHomeFetch = ()=>{\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n    const [state, setState] = useState(initialState);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [isLoadingMore, setIsLoadingMore] = useState(false);\r\n\r\n    console.log(searchTerm)\r\n  \r\n    const fetchMovies = async (page, searchTerm = \"\") => {\r\n      try {\r\n        setError(false);\r\n        setLoading(true);\r\n  \r\n        const movies = await API.fetchMovies(searchTerm, page);\r\n  \r\n        setState((prev) => ({\r\n          ...movies,\r\n          results:\r\n            page > 1 ? [...prev.results, ...movies.results] : [...movies.results],\r\n        }));\r\n      } catch (error) {\r\n        setError(true);\r\n      }\r\n      setLoading(false);\r\n    };\r\n    // initial render and search\r\n    useEffect(() => {\r\n      if(!searchTerm){\r\n        const sessionState = isPersistedState('homeState');\r\n        if (sessionState){\r\n          console.log(\"grabbing from session storage\")\r\n          setState(sessionState);\r\n          return;\r\n        }\r\n      }\r\n      console.log(\"grabbing from api\")\r\n      setState(initialState)\r\n      fetchMovies(1, searchTerm);\r\n    }, [searchTerm]);\r\n\r\n    // fetching movie while clicking on button by using isLoadingMore state and updating page\r\n    useEffect(()=>{\r\n      if(!isLoadingMore) return;\r\n      fetchMovies(state.page + 1, searchTerm);\r\n      setIsLoadingMore(false);\r\n    },[isLoadingMore, searchTerm, state.page]);\r\n\r\n    // write to session storage\r\n    useEffect(()=>{\r\n      if(!searchTerm){\r\n        sessionStorage.setItem('homeState', JSON.stringify(state))\r\n      }\r\n    }, [searchTerm, state])\r\n\r\n    return{ state, loading, error,searchTerm, setSearchTerm, setIsLoadingMore};\r\n  \r\n}","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  background: ${(props) =>\n    `linear-gradient(\n      to bottom, rgba(0,0,0,0)\n      39%,rgba(0,0,0,0)\n      41%,rgba(0,0,0,0.65)\n      100%\n    ),\n    url('${props.image}'), var(--darkGrey)`};\n  background-size: 100%, cover;\n  background-position: center;\n  height: 555px;\n  position: relative;\n  animation: animateHeroimage 1s;\n\n  @keyframes animateHeroimage {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  padding: 20px;\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n`;\n\nexport const Text = styled.div`\n  z-index: 100;\n  max-width: 700px;\n  position: absolute;\n  bottom: 40px;\n  margin-right: 20px;\n  min-height: 100px;\n  color: var(--white);\n\n  h1 {\n    font-size: var(--fontSuperBig);\n\n    @media screen and (max-width: 720px) {\n      font-size: var(--fontBig);\n    }\n  }\n\n  p {\n    font-size: var(--fontMed);\n  \n    @media screen and (max-width: 720px) {\n      font-size: var(--fontSmall);\n    }\n  }\n\n  @media screen and (max-width: 720px) {\n    max-width: 100%;\n  }\n`;\n\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {Wrapper, Content, Text} from './HeroImage.styles'\r\nconst HeroImage = (props)=> {\r\n    return (\r\n        <Wrapper image={props.image}>\r\n            <Content>\r\n                <Text>\r\n                    <h1>{props.title}</h1>\r\n                    <p>{props.text}</p>\r\n                </Text>\r\n            </Content>\r\n        </Wrapper>\r\n    )\r\n}\r\nHeroImage.propTypes = {\r\n    image: PropTypes.string,\r\n    title: PropTypes.string,\r\n    text: PropTypes.string\r\n}\r\n\r\n\r\nexport default HeroImage;\r\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n  padding: 0 20px;\n\n  h1 {\n    color: var(--medGrey);\n  }\n\n  h1 {\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontBig);\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 2rem;\n`;\n","import React from 'react';\r\nimport { Wrapper, Content } from './Grid.styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Grid= ({header, children})=> {\r\n    return (\r\n        <Wrapper>\r\n            <h1>{header}</h1>\r\n            <Content>{children}</Content>\r\n        </Wrapper>\r\n    )\r\n}\r\nGrid.propTypes = {\r\n    header: PropTypes.string,\r\n    children:  PropTypes.array\r\n}\r\n\r\nexport default Grid;","import styled from 'styled-components';\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 100%;\n  max-width: 720px;\n  transition: all 0.3s;\n  object-fit: cover;\n  border-radius: 20px;\n  animation: animateMovieThumb 0.5s;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  @keyframes animateMovieThumb {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n","import React from \"react\";\r\nimport { Image } from \"./Thumb.styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Thumb = ({ image, movieId, clickable }) => {\r\n  return (\r\n    <div>\r\n      {clickable ? (\r\n        <Link to={`/${movieId}`}>\r\n          <Image src={image} alt=\"movie-thumb\" />\r\n        </Link>\r\n      ) : (\r\n        <Image src={image} alt=\"movie-thumb\" />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nThumb.propTypes = {\r\n  image: PropTypes.string,\r\n  movieId: PropTypes.number,\r\n  clickable: PropTypes.bool\r\n}\r\n\r\nexport default Thumb;\r\n","import styled from 'styled-components';\n\nexport const Spinner = styled.div`\n  border: 5px solid var(--lightGrey); \n  border-top: 5px solid var(--medGrey);\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  animation: spin 0.8s linear infinite;\n  margin: 20px auto;\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","\r\nimport { Spinner } from './Spinner.styles'\r\n\r\nexport default Spinner;\r\n","export default __webpack_public_path__ + \"static/media/search-icon.cd820f5a.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 100px;\n  background: var(--darkGrey);\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  position: relative;\n  max-width: var(--maxWidth);\n  width: 100%;\n  height: 55px;\n  background: var(--medGrey);\n  margin: 0 auto;\n  border-radius: 40px;\n  color: var(--white);\n\n  img {\n    position: absolute;\n    left: 15px;\n    top: 14px;\n    width: 30px;\n  }\n\n  input {\n    font-size: 28px;\n    position: absolute;\n    left: 0px;\n    margin: 8px 0;\n    padding: 0 0 0 60px;\n    border: 0;\n    width: 95%;\n    background: transparent;\n    height: 40px;\n    color: var(--white);\n\n    :focus {\n      outline: none;\n    }\n\n    @media screen and (max-width: 720px) {\n      font-size: 28px;\n    }\n  }\n`;\n","import React, {useState, useEffect, useRef} from 'react'\r\nimport searchIcon from '../../images/search-icon.svg';\r\nimport {Wrapper, Content} from './SearchBar.styles';\r\nimport PropTypes from 'prop-types';\r\nconst SearchBar = ({setSearchTerm}) => {\r\n    const [state, setState] = useState('');\r\n    const initial = useRef(true);\r\n    \r\n    useEffect(()=>{\r\n        if(initial.current){\r\n            initial.current = false;\r\n            return;\r\n        }\r\n        const timer = setTimeout(()=>{\r\n            setSearchTerm(state);\r\n        }, 500)\r\n        return ()=> clearTimeout(timer);\r\n    },[setSearchTerm, state])\r\n    return (\r\n        <Wrapper>\r\n            <Content>\r\n                <img src={searchIcon} alt=\"search-Icon\" />\r\n                <input type=\"text\" placeholder='search movie' onChange={e => setState(e.currentTarget.value)} value={state}/>\r\n            </Content>\r\n        </Wrapper>\r\n    )\r\n}\r\nSearchBar.propTypes = {\r\n    setSearchTerm: PropTypes.func\r\n}\r\n\r\nexport default SearchBar;\r\n","\nimport styled from 'styled-components';\n\nexport const Wrapper = styled.button`\n  display: block;\n  background: var(--darkGrey);\n  width: 25%;\n  min-width: 200px;\n  height: 60px;\n  border-radius: 30px;\n  color: var(--white);\n  border: 0;\n  font-size: var(--fontBig);\n  margin: 20px auto;\n  transition: all 0.3s;\n  outline: none;\n  cursor: pointer;\n\n  :hover {\n    opacity: 0.8;\n  }\n`;\n","import React from 'react';\r\nimport {Wrapper} from './Button.styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = ({text, callback}) => {\r\n    return (\r\n        <Wrapper type='button' onClick={callback}>\r\n            {text}\r\n        </Wrapper>\r\n    )\r\n}\r\nButton.propTypes = {\r\n    text: PropTypes.string,\r\n    callback: PropTypes.func\r\n}\r\n\r\nexport default Button;\r\n","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import React from \"react\";\r\n// config\r\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from \"../config\";\r\n// API\r\n// import API from \"../API\";\r\n\r\n// Hook\r\nimport {useHomeFetch} from  '../hooks/UseHomeFetch';\r\n// components\r\nimport HeroImage from \"./HeroImage/HeroImage\";\r\nimport Grid from \"./Grid/Grid\";\r\nimport Thumb from \"./Thumb/Thumb\";\r\nimport Spinner from \"./Spinner/Spinner\";\r\nimport SearchBar from \"./SearchBar/SearchBar\";\r\nimport Button from \"./Button/Button\";\r\n\r\n//image\r\nimport NoImage from \"../images/no_image.jpg\";\r\nconst Home = () => {\r\n    const {state, loading, error,searchTerm, setSearchTerm, setIsLoadingMore} = useHomeFetch();\r\n\r\n  console.log(state);\r\n    if(error) return <div>Something went wrong</div>\r\n  return (\r\n    <>\r\n    {/* removing heorimage while searching  */}\r\n        {(!searchTerm && state.results[0]) &&\r\n            <HeroImage \r\n                image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\r\n                title={state.results[0].original_title}\r\n                text={state.results[0].overview}\r\n            />\r\n        }\r\n        <SearchBar setSearchTerm={setSearchTerm}/>\r\n        <Grid header={searchTerm? 'Search Result' : 'Popular Movies'}>\r\n            {state.results.map(movie=>(\r\n                <Thumb key={movie.id} clickable image={movie.poster_path?IMAGE_BASE_URL + POSTER_SIZE+ movie.poster_path : NoImage} movieId={movie.id}/>\r\n            ))}\r\n        </Grid>\r\n        {/* spinner appears only when loading is true */}\r\n        {loading && <Spinner/>}\r\n        {/* button is shown if lading is false and it is not the last page */}\r\n        {state.page<state.total_pages && !loading && (<Button text='Load More' callback={()=> setIsLoadingMore(true)}/>)}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 70px;\n  background: var(--medGrey);\n  color: var(--white);\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: var(--maxWidth);\n  padding: 0 20px;\n\n  span {\n    font-size: 1.2rem;\n    color: var(--white);\n    padding-right: 10px;\n\n    @media screen and (max-width: 768px) {\n      font-size: 16px;\n    }\n  }\n`;\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n// styles\r\nimport { Wrapper, Content } from './BreadCrumb.styles';\r\n\r\n\r\nconst BreadCrumb = ({movieTitle}) => {\r\n    const style = {\r\n        textDecoration: 'none',\r\n    }\r\n    return(\r\n        <Wrapper>\r\n            <Content>\r\n                <Link to='/' style={style}>\r\n                    <span>Home</span>\r\n                </Link>\r\n                <span>|</span>\r\n                <span>{movieTitle}</span>\r\n\r\n            </Content>\r\n        </Wrapper>\r\n    )\r\n}\r\nBreadCrumb.propTypes = {\r\n    movieTitle: PropTypes.string\r\n}\r\n\r\nexport default BreadCrumb;\r\n","import styled from 'styled-components';\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from '../../config';\n\nexport const Wrapper = styled.div`\n  background: ${(props) =>\n    props.backdrop\n      ? `url('${IMAGE_BASE_URL}${BACKDROP_SIZE}${props.backdrop}')`\n      : '#000'};\n  background-size: cover;\n  background-position: center;\n  padding: 40px 20px;\n  animation: animateMovieinfo 1s;\n\n  @keyframes animateMovieinfo {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  max-width: 1280px;\n\n  margin: 0 auto;\n  background: rgb(0, 0, 0, 0.7);\n  border-radius: 20px;\n\n  @media screen and (max-width: 768px) {\n    display: block;\n    max-height: none;\n  }\n`;\n\nexport const Text = styled.div`\n  width: 100%;\n  padding: 20px 40px;\n  color: var(--white);\n  overflow: hidden;\n\n  .rating-director {\n    display: flex;\n    justify-content: flex-start;\n  }\n\n  .score {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 35px;\n    height: 35px;\n    background: #fff;\n    color: #000;\n    font-weight: 800;\n    border-radius: 25px;\n    margin: 0px 0 0 0;\n  }\n\n  .director {\n    margin: 0 0 0 40px;\n  }\n\n    p {\n      margin: 0;\n    }\n  }\n\n  h1 {\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontBig);\n    }\n  }\n`;\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n// components\r\nimport Thumb from '../Thumb/Thumb'\r\n// config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../../config';\r\n// IMAGE\r\nimport NoImage from '../../images/no_image.jpg';\r\n// styles\r\nimport {Wrapper, Content, Text} from './MovieInfo.styles'\r\n\r\nconst MovieInfo = ({movie}) =>  {\r\n    return (\r\n        <Wrapper backdrop={movie.backdrop_path}>\r\n            <Content>\r\n                <Thumb \r\n                    image={movie.poster_path? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`:NoImage}\r\n                    clickable={false}\r\n                    alt='movie-thumb'\r\n                />\r\n                <Text>\r\n                    <h1>{movie.title}</h1>\r\n                    <h3>PLOT</h3>\r\n                    <p>{movie.overview}</p>\r\n\r\n                    <div className=\"rating-director\">\r\n                        <div>\r\n                            <h3>RATING</h3>\r\n                            <div className=\"score\">{movie.vote_average}</div>\r\n                        </div>\r\n                        <div className=\"director\">\r\n                            <h3>DIRECTOR{movie.directors.length > 1? 'S': ''}</h3>\r\n                            {movie.directors.map(director=>(\r\n                                <p key={director.credit_id}>{director.name}</p>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </Text>\r\n            </Content>\r\n            \r\n        </Wrapper>\r\n    )\r\n}\r\nMovieInfo.propTypes = {\r\n    movie: PropTypes.object,\r\n}\r\n\r\nexport default MovieInfo\r\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  min-height: 100px;\n  background: var(--darkGrey);\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  max-width: var(--maxWidth);\n  width: 100%;\n  margin: 0 auto;\n\n  .column {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: var(--medGrey);\n    border-radius: 20px;\n    margin: 0 20px;\n    flex: 1;\n\n    :first-child {\n      margin-left: 0;\n    }\n\n    :last-child {\n      margin-right: 0;\n    }\n  }\n\n  @media screen and (max-width: 768px) {\n    display: block;\n\n    .column {\n      margin: 20px 0;\n    }\n  }\n`;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// HELPERS\r\nimport {calcTime, convertMoney} from '../../helpers';\r\n// ?]styles\r\nimport { Wrapper, Content } from './MovieInfoBar.styles';\r\n\r\nconst MovieInfoBar = ({time, budget, revenue}) => {\r\n    return (\r\n        <Wrapper>\r\n            <Content>\r\n                <div className=\"column\">\r\n                    <p>Running time: {calcTime(time)}</p>\r\n                </div>\r\n                <div className=\"column\">\r\n                    <p>Budget: {convertMoney(budget)}</p>\r\n                </div>\r\n                <div className=\"column\">\r\n                    <p>Revenue: {convertMoney(revenue)}</p>\r\n                </div>\r\n                \r\n\r\n            </Content>\r\n            \r\n        </Wrapper>\r\n    )\r\n}\r\nMovieInfoBar.propTypes = {\r\n    time: PropTypes.number,\r\n    budget: PropTypes.number,\r\n    revenue: PropTypes.number\r\n}\r\n\r\n\r\nexport default MovieInfoBar\r\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  color: var(--white);\n  background: var(--darkGrey);\n  border-radius: 20px;\n  padding: 5px;\n  text-align: center;\n\n  h3 {\n    margin: 10px 0 0 0;\n  }\n\n  p {\n    margin: 5px 0;\n  }\n`;\n\nexport const Image = styled.img`\n  display: block;\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n  border-radius: 15px;\n`;\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n// styles\r\nimport {Wrapper, Image} from './Actor.styles';\r\n\r\nconst Actor = ({name, character, imageUrl}) => {\r\n    return(\r\n        <Wrapper>\r\n            <Image src={imageUrl} alt='actor-thumb'/>\r\n            <h3>{name}</h3>\r\n            <p>{character}</p>\r\n        </Wrapper>\r\n\r\n    )\r\n}\r\n\r\nActor.propTypes = {\r\n    name: PropTypes.string,\r\n    character: PropTypes.string,\r\n    imageUrl: PropTypes.string\r\n}\r\n\r\nexport default Actor;","import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\n// config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config'\r\n\r\n// COMPONENTS\r\nimport Grid from './Grid/Grid'\r\nimport { Spinner } from './Spinner/Spinner.styles'\r\nimport BreadCrumb from './BreadCrumb/BreadCrumb'\r\nimport MovieInfo from './MovieInfo/MovieInfo'\r\nimport MovieInfoBar from './MovieInfoBar/MovieInfoBar'\r\nimport Actor from './Actor/Actor'\r\n// hook\r\nimport {useMovieFetch} from '../hooks/useMovieFetch';\r\n// image\r\nimport NoImage from '../images/no_image.jpg'\r\n\r\nconst Movie = () => {\r\n    const {movieId} = useParams(); //it is named movieid because in app js we have named it such\r\n    const {state: movie, loading, error, errorMessage} = useMovieFetch(movieId);\r\n\r\n    if(isNaN(movieId)) return <div>galat url mat dala karo!!</div>\r\n\r\n    if(loading) return <Spinner/>;\r\n\r\n    if (error) return <div>{errorMessage}</div>;\r\n       return (\r\n        <>\r\n            <BreadCrumb movieTitle={movie.original_title}/>\r\n            <MovieInfo movie={movie}/>\r\n            <MovieInfoBar time={movie.runtime} budget={movie.budget} revenue={movie.revenue}/>\r\n            <Grid header='Actors'>\r\n                {movie.actors.map(actor=>(\r\n                    <Actor key={actor.credit_id} name={actor.name} character={actor.character} imageUrl={actor.profile_path? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`: NoImage}/>\r\n                ))}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Movie\r\n","import {useState, useEffect} from 'react';\r\nimport API from '../API';\r\nimport { isPersistedState } from '../helpers';\r\n\r\n\r\nexport const useMovieFetch = movieId => {\r\n    const [state, setState] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    useEffect(()=>{\r\n        const fetchMovie = async() => {\r\n\r\n            try{\r\n                setLoading(true);\r\n                setError(false);\r\n\r\n                const movie = await API.fetchMovie(movieId);\r\n                const credits = await API.fetchCredits(movieId);\r\n                // from api we get all crew member so we are filtering director to show\r\n                const directors = credits.crew.filter(\r\n                    member => member.job === 'Director'\r\n                );\r\n                setState({\r\n                    ...movie,\r\n                    actors: credits.cast,\r\n                    directors\r\n                })\r\n                setLoading(false)\r\n            }catch (error){\r\n                console.log('From useMovieFetch',error.message);\r\n                setError(true); \r\n                setLoading(false);\r\n                setErrorMessage(error.message)\r\n            }\r\n        }\r\n        // session storage\r\n        const sessionState = isPersistedState(movieId)\r\n        if(sessionState){\r\n            setState(sessionState);\r\n            setLoading(false)\r\n            return;\r\n        }\r\n        fetchMovie();\r\n    }, [movieId]);\r\n\r\n    // write to session storage\r\n    useEffect(()=>{\r\n        sessionStorage.setItem(movieId, JSON.stringify(state))\r\n    }, [movieId, state])\r\n    return {state, loading, error, errorMessage}\r\n}","import React from 'react'\r\n\r\nconst NotFound = () =>  {\r\n    return (\r\n        <div>\r\n            not found\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound\r\n","import React from 'react'\n\n// routing\nimport {BrowserRouter as Router, Routes, Route} from 'react-router-dom';\n\n// import styled from 'styled-components'\nimport {GlobalStyle} from './GlobalStyle';\nimport Header from './components/Header/Header';\nimport Home from './components/Home';\nimport Movie from './components/Movie';\nimport NotFound from './components/NotFound'\n\n// implicit return using arrow function\nconst App = () =>  (\n    <Router>\n      <Header/>\n      <Routes>\n        <Route path='/' element={<Home/>}/>\n        <Route path='/:movieId' element={<Movie/>}/>\n        <Route path='/q*' element={<NotFound/>}/>\n      </Routes>\n      <GlobalStyle/>\n    </Router>\n  )\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}